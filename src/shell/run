#!/bin/bash

# Description:
# Run a provided Solution file. When the Solution file is from a compiled
# language (e.g. C), it is assumed that a corresponding compilation file
# already exists in the directory.
#
# Parameters:
# $1: Directory where file-to-run lives.
# $2: Solution file name with extension (e.g. Solution.java).
#
# Example invocations:
# ./src/shell/run . Solution.java

# Base path of the script
BASE_PATH=$(dirname "$0")

# Imports
source "$BASE_PATH"/_command

# Read standard input
STDIN=$(cat -)

entry_file_name=$(echo $2 | cut -d'.' -f1)

# Execute entry file with standard input
case $2 in

  #######################
  # Compiled languages
  #######################
  *.java)
    command_is_required java
    echo -e "${STDIN}" | java -cp $1 ${entry_file_name}
    ;;
  *.c)
    echo -e "${STDIN}" | "$1/${entry_file_name}.out"
    ;;
  *.cpp)
    echo -e "${STDIN}" | "$1/${entry_file_name}.out"
    ;;

  #######################
  # Interpreted languages
  #######################
  *.py)
    # Accept either 'python' or 'python3' command.
    # This code could potentially be moved to a has-any-command script,
    # which would receive a list of commands and return the first existent
    # command, or a magic error value otherwise.

    hasPython=$(command_exists python)
    hasPython3=$(command_exists python3)
    pythonCommand=""

    if [ "$hasPython" = "true" ]; then
      pythonCommand="python"
    elif [ "$hasPython3" = "true" ]; then
      pythonCommand="python3"
    fi

    if [ -z "$pythonCommand" ]; then
      echo "Either 'python3' or 'python' command is required but neither was found." >&2
      exit 1
    fi

    echo -e "${STDIN}" | $pythonCommand $1/$2
    ;;
esac
